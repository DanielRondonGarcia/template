name: Release package
on:
  workflow_dispatch:
    inputs:
      release-type:
        description: 'Release type (one of): patch, minor, major, prepatch, preminor, premajor, prerelease'
        required: true
jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
        contents: write
    steps:
      # Checkout project repository
      - name: Checkout
        uses: actions/checkout@v3

      # Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          registry-url: https://registry.npmjs.org/
          node-version: '18'

      # Install dependencies
      - name: Install dependencies
        run: npm ci

      # Get the actual version number
      - name: Get the actual version number
        id: get_actual_version
        run: echo "ACTUAL_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV

      # Make a Release using release-it
      - name: Make a Release
        if: startsWith(github.event.inputs.release-type, 'major') == true
        run: |
            echo "NEW_VERSION=$(npm --no-git-tag-version version major)" >> $GITHUB_ENV
            # Discard changes in package.json and package-lock.json
            git checkout -- package.json package-lock.json
            npm run release major

      - name: Make a Release
        if: startsWith(github.event.inputs.release-type, 'minor') == true
        run: |
            echo "NEW_VERSION=$(npm --no-git-tag-version version minor)" >> $GITHUB_ENV
            # Discard changes in package.json and package-lock.json
            git checkout -- package.json package-lock.json
            npm run release minor

      - name: Make a Release
        if: startsWith(github.event.inputs.release-type, 'patch') == true
        run: |
            echo "NEW_VERSION=$(npm --no-git-tag-version version patch)" >> $GITHUB_ENV
            # Discard changes in package.json and package-lock.json
            git checkout -- package.json package-lock.json
            npm run release patch

      - name: Make a Release
        if: startsWith(github.event.inputs.release-type, 'premajor') == true
        run: |
            echo "NEW_VERSION=$(npm --no-git-tag-version version premajor)" >> $GITHUB_ENV
            # Discard changes in package.json and package-lock.json
            git checkout -- package.json package-lock.json
            npm run release premajor

      - name: Make a Release
        if: startsWith(github.event.inputs.release-type, 'preminor') == true
        run: |
            echo "NEW_VERSION=$(npm --no-git-tag-version version preminor)" >> $GITHUB_ENV
            # Discard changes in package.json and package-lock.json
            git checkout -- package.json package-lock.json
            npm run release preminor

      - name: Make a Release
        if: startsWith(github.event.inputs.release-type, 'prepatch') == true
        run: |
            echo "NEW_VERSION=$(npm --no-git-tag-version version prepatch)" >> $GITHUB_ENV
            # Discard changes in package.json and package-lock.json
            git checkout -- package.json package-lock.json
            npm run release prepatch

      - name: Make a Release
        if: startsWith(github.event.inputs.release-type, 'prerelease') == true
        run: |
            echo "NEW_VERSION=$(npm --no-git-tag-version version prerelease)" >> $GITHUB_ENV
            # Discard changes in package.json and package-lock.json
            git checkout -- package.json package-lock.json
            npm run release prerelease

      - name: Commit CHANGELOG.md and package.json
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          branch: main
          commit_message: 'chore(release): ${{ env.NEW_VERSION }} [skip ci]'

      - name: Create Tag
        run: git tag ${{ env.NEW_VERSION }}

      - name: Create Release
        uses: ncipollo/release-action@v1.13.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ env.NEW_VERSION }}
          releaseName: Release ${{ env.NEW_VERSION }}
          generateReleaseNotes: true
